{"ast":null,"code":"import { __read } from \"tslib\";\nimport { useEffect, useState, useCallback } from 'react';\nimport useConstant from 'use-constant';\nimport { BehaviorSubject, Subject } from 'rxjs';\nexport function useEventCallback(callback, initialState, inputs) {\n  var initialValue = typeof initialState !== 'undefined' ? initialState : null;\n\n  var _a = __read(useState(initialValue), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  var event$ = useConstant(function () {\n    return new Subject();\n  });\n  var state$ = useConstant(function () {\n    return new BehaviorSubject(initialValue);\n  });\n  var inputs$ = useConstant(function () {\n    return new BehaviorSubject(typeof inputs === 'undefined' ? null : inputs);\n  });\n\n  function eventCallback(e) {\n    return event$.next(e);\n  }\n\n  var returnedCallback = useCallback(eventCallback, []);\n  useEffect(function () {\n    inputs$.next(inputs);\n  }, inputs || []);\n  useEffect(function () {\n    setState(initialValue);\n    var value$;\n\n    if (!inputs) {\n      value$ = callback(event$, state$);\n    } else {\n      value$ = callback(event$, inputs$, state$);\n    }\n\n    var subscription = value$.subscribe(function (value) {\n      state$.next(value);\n      setState(value);\n    });\n    return function () {\n      subscription.unsubscribe();\n      state$.complete();\n      inputs$.complete();\n      event$.complete();\n    };\n  }, []); // immutable forever\n\n  return [returnedCallback, state];\n}","map":{"version":3,"sources":["../../src/use-event-callback.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,QAApB,EAA8B,WAA9B,QAAiD,OAAjD;AACA,OAAO,WAAP,MAAwB,cAAxB;AACA,SAAqB,eAArB,EAAsC,OAAtC,QAAqD,MAArD;AAsCA,OAAM,SAAU,gBAAV,CACJ,QADI,EAEJ,YAFI,EAGJ,MAHI,EAG0B;AAE9B,MAAM,YAAY,GAAI,OAAO,YAAP,KAAwB,WAAxB,GAAsC,YAAtC,GAAqD,IAA3E;;AACM,MAAA,EAAA,GAAA,MAAA,CAAA,QAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA;AAAA,MAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAQ,QAAA,GAAA,EAAA,CAAA,CAAA,CAAR;;AACN,MAAM,MAAM,GAAG,WAAW,CAAC,YAAA;AAAM,WAAA,IAAA,OAAA,EAAA;AAAyB,GAAhC,CAA1B;AACA,MAAM,MAAM,GAAG,WAAW,CAAC,YAAA;AAAM,WAAA,IAAI,eAAJ,CAAA,YAAA,CAAA;AAA+C,GAAtD,CAA1B;AACA,MAAM,OAAO,GAAG,WAAW,CACzB,YAAA;AAAM,WAAA,IAAI,eAAJ,CAAkD,OAAO,MAAP,KAAkB,WAAlB,GAAgC,IAAhC,GAAlD,MAAA,CAAA;AAAgG,GAD7E,CAA3B;;AAIA,WAAS,aAAT,CAAuB,CAAvB,EAAoC;AAClC,WAAO,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAP;AACD;;AACD,MAAM,gBAAgB,GAAG,WAAW,CAAC,aAAD,EAAgB,EAAhB,CAApC;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AACD,GAFQ,EAEN,MAAM,IAAI,EAFJ,CAAT;AAIA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,QAAQ,CAAC,YAAD,CAAR;AACA,QAAI,MAAJ;;AAEA,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,MAAM,GAAI,QAAmD,CAAC,MAAD,EAAS,MAAT,CAA7D;AACD,KAFD,MAEO;AACL,MAAA,MAAM,GAAI,QAAgB,CAAC,MAAD,EAAS,OAAT,EAAwC,MAAxC,CAA1B;AACD;;AACD,QAAM,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,UAAC,KAAD,EAAM;AAC1C,MAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACA,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAHoB,CAArB;AAIA,WAAO,YAAA;AACL,MAAA,YAAY,CAAC,WAAb;AACA,MAAA,MAAM,CAAC,QAAP;AACA,MAAA,OAAO,CAAC,QAAR;AACA,MAAA,MAAM,CAAC,QAAP;AACD,KALD;AAMD,GAnBQ,EAmBN,EAnBM,CAAT,CAnB8B,CAsCvB;;AAEP,SAAO,CAAC,gBAAD,EAAwD,KAAxD,CAAP;AACD","sourceRoot":"","sourcesContent":["import { __read } from \"tslib\";\nimport { useEffect, useState, useCallback } from 'react';\nimport useConstant from 'use-constant';\nimport { BehaviorSubject, Subject } from 'rxjs';\nexport function useEventCallback(callback, initialState, inputs) {\n    var initialValue = (typeof initialState !== 'undefined' ? initialState : null);\n    var _a = __read(useState(initialValue), 2), state = _a[0], setState = _a[1];\n    var event$ = useConstant(function () { return new Subject(); });\n    var state$ = useConstant(function () { return new BehaviorSubject(initialValue); });\n    var inputs$ = useConstant(function () { return new BehaviorSubject(typeof inputs === 'undefined' ? null : inputs); });\n    function eventCallback(e) {\n        return event$.next(e);\n    }\n    var returnedCallback = useCallback(eventCallback, []);\n    useEffect(function () {\n        inputs$.next(inputs);\n    }, inputs || []);\n    useEffect(function () {\n        setState(initialValue);\n        var value$;\n        if (!inputs) {\n            value$ = callback(event$, state$);\n        }\n        else {\n            value$ = callback(event$, inputs$, state$);\n        }\n        var subscription = value$.subscribe(function (value) {\n            state$.next(value);\n            setState(value);\n        });\n        return function () {\n            subscription.unsubscribe();\n            state$.complete();\n            inputs$.complete();\n            event$.complete();\n        };\n    }, []); // immutable forever\n    return [returnedCallback, state];\n}\n//# sourceMappingURL=use-event-callback.js.map"]},"metadata":{},"sourceType":"module"}