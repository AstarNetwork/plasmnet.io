{"ast":null,"code":"import { css } from 'styled-components';\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n/**\n * Converts breakpoint units in px to rem or em\n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} ratio [16] - size of 1 rem in px. What is your main font-size in px?\n * @param {'rem' | 'em'} unit\n */\n\n\nfunction pxToEmOrRem(breakpoints) {\n  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  var unit = arguments.length > 2 ? arguments[2] : undefined;\n  var newBreakpoints = {};\n\n  for (var key in breakpoints) {\n    var point = breakpoints[key];\n\n    if (String(point).includes('px')) {\n      newBreakpoints[key] = +(parseInt(point) / ratio) + unit;\n      continue;\n    }\n\n    newBreakpoints[key] = point;\n  }\n\n  return newBreakpoints;\n}\n/**\n * Converts breakpoint units in px to em \n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} ratio [16] - size of 1em in px. What is your main font-size in px?\n */\n\n\nfunction pxToEm(breakpoints) {\n  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return pxToEmOrRem(breakpoints, ratio, 'em');\n}\n/**\n * Converts breakpoint units in px to rem \n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} ratio [16] - size of 1rem in px. What is your main font-size in px?\n */\n\n\nfunction pxToRem(breakpoints) {\n  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return pxToEmOrRem(breakpoints, ratio, 'rem');\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n          @media (min-width: \", \") {\\n            \", \"\\n          }\\n        \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n          @media (max-width: \", \") {\\n            \", \"\\n          }\\n        \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    @media (min-width: \", \") and\\n      (max-width: \", \") {\\n      \", \"\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    @media (min-width: \", \") {\\n      \", \"\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    @media (max-width: \", \") {\\n      \", \"\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Default media breakpoints\n * @type {Object}\n */\n\n\nvar defaultBreakpoints = {\n  huge: '1440px',\n  large: '1170px',\n  medium: '768px',\n  small: '450px'\n};\n\nfunction getSizeFromBreakpoint(breakpointValue) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue];\n  } else if (parseInt(breakpointValue)) {\n    return breakpointValue;\n  } else {\n    console.error('styled-media-query: No valid breakpoint or size specified for media.');\n    return '0';\n  }\n}\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint sizes\n * @return {Object} - Media generators for each breakpoint\n */\n\n\nfunction generateMedia() {\n  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBreakpoints;\n\n  var lessThan = function lessThan(breakpoint) {\n    return function () {\n      return css(_templateObject(), getSizeFromBreakpoint(breakpoint, breakpoints), css.apply(void 0, arguments));\n    };\n  };\n\n  var greaterThan = function greaterThan(breakpoint) {\n    return function () {\n      return css(_templateObject2(), getSizeFromBreakpoint(breakpoint, breakpoints), css.apply(void 0, arguments));\n    };\n  };\n\n  var between = function between(firstBreakpoint, secondBreakpoint) {\n    return function () {\n      return css(_templateObject3(), getSizeFromBreakpoint(firstBreakpoint, breakpoints), getSizeFromBreakpoint(secondBreakpoint, breakpoints), css.apply(void 0, arguments));\n    };\n  };\n\n  var oldStyle = Object.keys(breakpoints).reduce(function (acc, label) {\n    var size = breakpoints[label];\n\n    acc.to[label] = function () {\n      console.warn(\"styled-media-query: Use media.lessThan('\".concat(label, \"') instead of old media.to.\").concat(label, \" (Probably we'll deprecate it)\"));\n      return css(_templateObject4(), size, css.apply(void 0, arguments));\n    };\n\n    acc.from[label] = function () {\n      console.warn(\"styled-media-query: Use media.greaterThan('\".concat(label, \"') instead of old media.from.\").concat(label, \" (Probably we'll deprecate it)\"));\n      return css(_templateObject5(), size, css.apply(void 0, arguments));\n    };\n\n    return acc;\n  }, {\n    to: {},\n    from: {}\n  });\n  return Object.assign({\n    lessThan: lessThan,\n    greaterThan: greaterThan,\n    between: between\n  }, oldStyle);\n}\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\n\n\nvar index = generateMedia();\n/**\n * Usage: styled.div` ${media.from.medium`background: #000;`} `;\n * With this code, background for small and medium sizes will be `default` and for more than medium, will be `#000`\n */\n\nexport default index;\nexport { pxToEm, pxToRem, defaultBreakpoints, generateMedia };","map":{"version":3,"sources":["/Users/sate/staketechnologies/plasmnet.io/plasmnet/node_modules/styled-media-query/dist/styled-media-query.es.js"],"names":["css","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","pxToEmOrRem","breakpoints","ratio","arguments","length","undefined","unit","newBreakpoints","key","point","String","includes","parseInt","pxToEm","pxToRem","_templateObject5","data","_templateObject4","_templateObject3","_templateObject2","_templateObject","defaultBreakpoints","huge","large","medium","small","getSizeFromBreakpoint","breakpointValue","console","error","generateMedia","lessThan","breakpoint","apply","greaterThan","between","firstBreakpoint","secondBreakpoint","oldStyle","keys","reduce","acc","label","size","to","warn","concat","from","assign","index"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;;AAEA,SAASC,sBAAT,CAAgCC,OAAhC,EAAyCC,GAAzC,EAA8C;AAC5C,MAAI,CAACA,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAN;AACD;;AAED,SAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,gBAAP,CAAwBL,OAAxB,EAAiC;AACpDC,IAAAA,GAAG,EAAE;AACHK,MAAAA,KAAK,EAAEH,MAAM,CAACC,MAAP,CAAcH,GAAd;AADJ;AAD+C,GAAjC,CAAd,CAAP;AAKD;AAED;;;;;;;;AAMA,SAASM,WAAT,CAAqBC,WAArB,EAAkC;AAChC,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,MAAIG,IAAI,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAjD;AACA,MAAIE,cAAc,GAAG,EAArB;;AAEA,OAAK,IAAIC,GAAT,IAAgBP,WAAhB,EAA6B;AAC3B,QAAIQ,KAAK,GAAGR,WAAW,CAACO,GAAD,CAAvB;;AAEA,QAAIE,MAAM,CAACD,KAAD,CAAN,CAAcE,QAAd,CAAuB,IAAvB,CAAJ,EAAkC;AAChCJ,MAAAA,cAAc,CAACC,GAAD,CAAd,GAAsB,EAAEI,QAAQ,CAACH,KAAD,CAAR,GAAkBP,KAApB,IAA6BI,IAAnD;AACA;AACD;;AAEDC,IAAAA,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAtB;AACD;;AAED,SAAOF,cAAP;AACD;AACD;;;;;;;AAOA,SAASM,MAAT,CAAgBZ,WAAhB,EAA6B;AAC3B,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,SAAOH,WAAW,CAACC,WAAD,EAAcC,KAAd,EAAqB,IAArB,CAAlB;AACD;AACD;;;;;;;AAMA,SAASY,OAAT,CAAiBb,WAAjB,EAA8B;AAC5B,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,SAAOH,WAAW,CAACC,WAAD,EAAcC,KAAd,EAAqB,KAArB,CAAlB;AACD;;AAED,SAASa,gBAAT,GAA4B;AAC1B,MAAIC,IAAI,GAAGxB,sBAAsB,CAAC,CAAC,iCAAD,EAAoC,mBAApC,EAAyD,yBAAzD,CAAD,CAAjC;;AAEAuB,EAAAA,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AAC7C,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASC,gBAAT,GAA4B;AAC1B,MAAID,IAAI,GAAGxB,sBAAsB,CAAC,CAAC,iCAAD,EAAoC,mBAApC,EAAyD,yBAAzD,CAAD,CAAjC;;AAEAyB,EAAAA,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AAC7C,WAAOD,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASE,gBAAT,GAA4B;AAC1B,MAAIF,IAAI,GAAGxB,sBAAsB,CAAC,CAAC,2BAAD,EAA8B,2BAA9B,EAA2D,aAA3D,EAA0E,aAA1E,CAAD,CAAjC;;AAEA0B,EAAAA,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AAC7C,WAAOF,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,gBAAT,GAA4B;AAC1B,MAAIH,IAAI,GAAGxB,sBAAsB,CAAC,CAAC,2BAAD,EAA8B,aAA9B,EAA6C,aAA7C,CAAD,CAAjC;;AAEA2B,EAAAA,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AAC7C,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASI,eAAT,GAA2B;AACzB,MAAIJ,IAAI,GAAGxB,sBAAsB,CAAC,CAAC,2BAAD,EAA8B,aAA9B,EAA6C,aAA7C,CAAD,CAAjC;;AAEA4B,EAAAA,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC3C,WAAOJ,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;AACD;;;;;;AAKA,IAAIK,kBAAkB,GAAG;AACvBC,EAAAA,IAAI,EAAE,QADiB;AAEvBC,EAAAA,KAAK,EAAE,QAFgB;AAGvBC,EAAAA,MAAM,EAAE,OAHe;AAIvBC,EAAAA,KAAK,EAAE;AAJgB,CAAzB;;AAOA,SAASC,qBAAT,CAA+BC,eAA/B,EAAgD;AAC9C,MAAI1B,WAAW,GAAGE,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAtF;;AAEA,MAAIF,WAAW,CAAC0B,eAAD,CAAf,EAAkC;AAChC,WAAO1B,WAAW,CAAC0B,eAAD,CAAlB;AACD,GAFD,MAEO,IAAIf,QAAQ,CAACe,eAAD,CAAZ,EAA+B;AACpC,WAAOA,eAAP;AACD,GAFM,MAEA;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAc,sEAAd;AACA,WAAO,GAAP;AACD;AACF;AACD;;;;;;;AAOA,SAASC,aAAT,GAAyB;AACvB,MAAI7B,WAAW,GAAGE,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEkB,kBAAtF;;AAEA,MAAIU,QAAQ,GAAG,SAASA,QAAT,CAAkBC,UAAlB,EAA8B;AAC3C,WAAO,YAAY;AACjB,aAAOzC,GAAG,CAAC6B,eAAe,EAAhB,EAAoBM,qBAAqB,CAACM,UAAD,EAAa/B,WAAb,CAAzC,EAAoEV,GAAG,CAAC0C,KAAJ,CAAU,KAAK,CAAf,EAAkB9B,SAAlB,CAApE,CAAV;AACD,KAFD;AAGD,GAJD;;AAMA,MAAI+B,WAAW,GAAG,SAASA,WAAT,CAAqBF,UAArB,EAAiC;AACjD,WAAO,YAAY;AACjB,aAAOzC,GAAG,CAAC4B,gBAAgB,EAAjB,EAAqBO,qBAAqB,CAACM,UAAD,EAAa/B,WAAb,CAA1C,EAAqEV,GAAG,CAAC0C,KAAJ,CAAU,KAAK,CAAf,EAAkB9B,SAAlB,CAArE,CAAV;AACD,KAFD;AAGD,GAJD;;AAMA,MAAIgC,OAAO,GAAG,SAASA,OAAT,CAAiBC,eAAjB,EAAkCC,gBAAlC,EAAoD;AAChE,WAAO,YAAY;AACjB,aAAO9C,GAAG,CAAC2B,gBAAgB,EAAjB,EAAqBQ,qBAAqB,CAACU,eAAD,EAAkBnC,WAAlB,CAA1C,EAA0EyB,qBAAqB,CAACW,gBAAD,EAAmBpC,WAAnB,CAA/F,EAAgIV,GAAG,CAAC0C,KAAJ,CAAU,KAAK,CAAf,EAAkB9B,SAAlB,CAAhI,CAAV;AACD,KAFD;AAGD,GAJD;;AAMA,MAAImC,QAAQ,GAAG1C,MAAM,CAAC2C,IAAP,CAAYtC,WAAZ,EAAyBuC,MAAzB,CAAgC,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AACnE,QAAIC,IAAI,GAAG1C,WAAW,CAACyC,KAAD,CAAtB;;AAEAD,IAAAA,GAAG,CAACG,EAAJ,CAAOF,KAAP,IAAgB,YAAY;AAC1Bd,MAAAA,OAAO,CAACiB,IAAR,CAAa,2CAA2CC,MAA3C,CAAkDJ,KAAlD,EAAyD,6BAAzD,EAAwFI,MAAxF,CAA+FJ,KAA/F,EAAsG,gCAAtG,CAAb;AACA,aAAOnD,GAAG,CAAC0B,gBAAgB,EAAjB,EAAqB0B,IAArB,EAA2BpD,GAAG,CAAC0C,KAAJ,CAAU,KAAK,CAAf,EAAkB9B,SAAlB,CAA3B,CAAV;AACD,KAHD;;AAKAsC,IAAAA,GAAG,CAACM,IAAJ,CAASL,KAAT,IAAkB,YAAY;AAC5Bd,MAAAA,OAAO,CAACiB,IAAR,CAAa,8CAA8CC,MAA9C,CAAqDJ,KAArD,EAA4D,+BAA5D,EAA6FI,MAA7F,CAAoGJ,KAApG,EAA2G,gCAA3G,CAAb;AACA,aAAOnD,GAAG,CAACwB,gBAAgB,EAAjB,EAAqB4B,IAArB,EAA2BpD,GAAG,CAAC0C,KAAJ,CAAU,KAAK,CAAf,EAAkB9B,SAAlB,CAA3B,CAAV;AACD,KAHD;;AAKA,WAAOsC,GAAP;AACD,GAdc,EAcZ;AACDG,IAAAA,EAAE,EAAE,EADH;AAEDG,IAAAA,IAAI,EAAE;AAFL,GAdY,CAAf;AAkBA,SAAOnD,MAAM,CAACoD,MAAP,CAAc;AACnBjB,IAAAA,QAAQ,EAAEA,QADS;AAEnBG,IAAAA,WAAW,EAAEA,WAFM;AAGnBC,IAAAA,OAAO,EAAEA;AAHU,GAAd,EAIJG,QAJI,CAAP;AAKD;AACD;;;;;;AAKA,IAAIW,KAAK,GAAGnB,aAAa,EAAzB;AACA;;;;;AAKA,eAAemB,KAAf;AACA,SAASpC,MAAT,EAAiBC,OAAjB,EAA0BO,kBAA1B,EAA8CS,aAA9C","sourcesContent":["import { css } from 'styled-components';\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\n/**\n * Converts breakpoint units in px to rem or em\n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} ratio [16] - size of 1 rem in px. What is your main font-size in px?\n * @param {'rem' | 'em'} unit\n */\nfunction pxToEmOrRem(breakpoints) {\n  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  var unit = arguments.length > 2 ? arguments[2] : undefined;\n  var newBreakpoints = {};\n\n  for (var key in breakpoints) {\n    var point = breakpoints[key];\n\n    if (String(point).includes('px')) {\n      newBreakpoints[key] = +(parseInt(point) / ratio) + unit;\n      continue;\n    }\n\n    newBreakpoints[key] = point;\n  }\n\n  return newBreakpoints;\n}\n/**\n * Converts breakpoint units in px to em \n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} ratio [16] - size of 1em in px. What is your main font-size in px?\n */\n\n\nfunction pxToEm(breakpoints) {\n  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return pxToEmOrRem(breakpoints, ratio, 'em');\n}\n/**\n * Converts breakpoint units in px to rem \n * @param {Object} breakpoints - an object containing breakpoint names as keys and the width as value\n * @param {number} ratio [16] - size of 1rem in px. What is your main font-size in px?\n */\n\nfunction pxToRem(breakpoints) {\n  var ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return pxToEmOrRem(breakpoints, ratio, 'rem');\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n          @media (min-width: \", \") {\\n            \", \"\\n          }\\n        \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n          @media (max-width: \", \") {\\n            \", \"\\n          }\\n        \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    @media (min-width: \", \") and\\n      (max-width: \", \") {\\n      \", \"\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    @media (min-width: \", \") {\\n      \", \"\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    @media (max-width: \", \") {\\n      \", \"\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Default media breakpoints\n * @type {Object}\n */\n\nvar defaultBreakpoints = {\n  huge: '1440px',\n  large: '1170px',\n  medium: '768px',\n  small: '450px'\n};\n\nfunction getSizeFromBreakpoint(breakpointValue) {\n  var breakpoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (breakpoints[breakpointValue]) {\n    return breakpoints[breakpointValue];\n  } else if (parseInt(breakpointValue)) {\n    return breakpointValue;\n  } else {\n    console.error('styled-media-query: No valid breakpoint or size specified for media.');\n    return '0';\n  }\n}\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint sizes\n * @return {Object} - Media generators for each breakpoint\n */\n\n\nfunction generateMedia() {\n  var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBreakpoints;\n\n  var lessThan = function lessThan(breakpoint) {\n    return function () {\n      return css(_templateObject(), getSizeFromBreakpoint(breakpoint, breakpoints), css.apply(void 0, arguments));\n    };\n  };\n\n  var greaterThan = function greaterThan(breakpoint) {\n    return function () {\n      return css(_templateObject2(), getSizeFromBreakpoint(breakpoint, breakpoints), css.apply(void 0, arguments));\n    };\n  };\n\n  var between = function between(firstBreakpoint, secondBreakpoint) {\n    return function () {\n      return css(_templateObject3(), getSizeFromBreakpoint(firstBreakpoint, breakpoints), getSizeFromBreakpoint(secondBreakpoint, breakpoints), css.apply(void 0, arguments));\n    };\n  };\n\n  var oldStyle = Object.keys(breakpoints).reduce(function (acc, label) {\n    var size = breakpoints[label];\n\n    acc.to[label] = function () {\n      console.warn(\"styled-media-query: Use media.lessThan('\".concat(label, \"') instead of old media.to.\").concat(label, \" (Probably we'll deprecate it)\"));\n      return css(_templateObject4(), size, css.apply(void 0, arguments));\n    };\n\n    acc.from[label] = function () {\n      console.warn(\"styled-media-query: Use media.greaterThan('\".concat(label, \"') instead of old media.from.\").concat(label, \" (Probably we'll deprecate it)\"));\n      return css(_templateObject5(), size, css.apply(void 0, arguments));\n    };\n\n    return acc;\n  }, {\n    to: {},\n    from: {}\n  });\n  return Object.assign({\n    lessThan: lessThan,\n    greaterThan: greaterThan,\n    between: between\n  }, oldStyle);\n}\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\n\nvar index = generateMedia();\n/**\n * Usage: styled.div` ${media.from.medium`background: #000;`} `;\n * With this code, background for small and medium sizes will be `default` and for more than medium, will be `#000`\n */\n\nexport default index;\nexport { pxToEm, pxToRem, defaultBreakpoints, generateMedia };\n"]},"metadata":{},"sourceType":"module"}